import React, { Component } from 'react';
import { Link } from 'react-router-dom';
import { bindActionCreators } from 'redux';
import { connect } from 'react-redux';
import { toastr } from 'react-redux-toastr';
import { shape, objectOf, func } from 'prop-types';
import DataPipelineApi from 'apis/DataPipelineApi';
import BranchesApi from 'apis/BranchesApi';
import Navbar from '../navbar/navbar';
import ProjectContainer from '../projectContainer';
import './dataInstanceOverview.css';
import Instruction from '../instruction/instruction';
import { getTimeCreatedAgo, parseToCamelCase } from '../../functions/dataParserHelpers';
import DataInstancesDeleteModal from '../data-instances-delete-and-abort-modal/dataInstancesDeleteNAbortModal';
import pipelinesApi from '../../apis/PipelinesApi';
import {
  RUNNING,
  SUCCESS,
  CANCELED,
  FAILED,
  PENDING,
} from '../../dataTypes';
import { deleteBranch, getBranchesList } from '../../actions/branchesActions';
import { fireModal } from '../../actions/actionModalActions';
import { setPreconfiguredOPerations } from '../../actions/userActions';
import { classifyPipeLines } from '../../functions/pipeLinesHelpers';

const getStatusForDataInstance = (status) => {
  let mappedStatus = status;
  switch (status) {
    case RUNNING:
      mappedStatus = 'In progress';
      break;
    case SUCCESS:
      mappedStatus = 'Active';
      break;
    case CANCELED:
      mappedStatus = 'Aborted';
      break;
    case PENDING:
      mappedStatus = 'In progress';
      break;
    default:
      break;
  }

  return mappedStatus;
};

export const InstanceCard = ({ ...props }) => {
  const {
    params,
    history,
    name,
    deletePipeline,
    setPreconfiguredOPerations,
  } = props;

  function goToPipelineView(id) {
    const pId = params.instances[0].projId;
    const instance = params.instances.filter((ins) => ins.id === id)[0];
    const configuredOperations = {
      dataOperatorsExecuted: instance.dataOperations,
      inputFiles: instance.inputFiles,
      pipelineBackendId: instance.pipelineBackendId,
    };
    setPreconfiguredOPerations(configuredOperations);
    history.push(`/my-projects/${pId}/pipeline-execution/new-data-pipeline`);
  }

  // returns a function that receives the name (or id) of the pipeline and deletes it
  function handleDelete() {
    const content = (
      <div style={{ textAlign: 'center' }}>
        <p>
          <strong>Are you sure you want to delete your dataset?</strong>
        </p>
        <p>
          You will free
          <strong>23Gb</strong>
          {' '}
          of cloud storage.
        </p>
        <p>You will loose all files generated by the pipeline.</p>
      </div>
    );

    const onPositive = () => deletePipeline(name);

    fireModal({
      title: `Delete dataset from your data pipeline ${name}`,
      type: 'danger',
      content,
      onPositive,
    });
  }

  function getButtonsDiv(instanceStatus, id) {
    let buttons;
    if (instanceStatus === RUNNING || instanceStatus === PENDING) {
      buttons = [
        <button
          type="button"
          key="abort-button"
          className="btn btn-danger border-solid my-auto"
          style={{ width: 'max-content' }}
        >
          Abort
        </button>,
      ];
    } else if (
      instanceStatus === SUCCESS
    ) {
      buttons = [
        <button
          type="button"
          key="experiment-button"
          className="btn btn-outline-dark my-auto"
          onClick={() => goToPipelineView(id)}
        >
          View Pipeline
        </button>,
        <button
          type="button"
          key="delete-button"
          onClick={
            () => props.setIsDeleteModalVisible(true, 'delete')
          }
          className="btn btn-danger btn-icon my-auto"
        >
          <i className="fa fa-times" />
        </button>,
      ];
    } else if (instanceStatus === FAILED
      || instanceStatus === CANCELED) {
      buttons = [
        <button
          type="button"
          key="experiment-button"
          className="btn btn-outline-dark my-auto"
          onClick={() => goToPipelineView(id)}
        >
          View Pipeline
        </button>,
        <button
          type="button"
          key="delete-button"
          className="btn btn-danger btn-icon my-auto"
          onClick={handleDelete}
        >
          <i className="fa fa-times" />
        </button>,
      ];
    }

    return (
      <div className="buttons-div d-flex">{buttons}</div>
    );
  }

  return (
    <div className="pipeline-card">
      <div className="header">
        <div className="title-div">
          <p><b>{getStatusForDataInstance(params.currentState)}</b></p>
        </div>
      </div>

      {params.instances.map((instance, index) => {
        const dataId = instance.id;
        const { timeCreatedAgo } = instance;
        const dataInstanceName = instance.descTitle;
        const uniqueName = dataInstanceName.split('/')[1];
        const modelDiv = 'inherit';
        let progressVisibility = 'inherit';
        if (instance.currentState === 'Expired') { progressVisibility = 'hidden'; }
        return (
          <div key={index} className="card-content">
            <div id="data-ins-summary-data" className="summary-data" data-key={`${instance.descTitle}`}>
              <div className="project-desc-experiment">
                <Link
                  to={{
                    pathname: `/my-projects/${instance.projId}/master/-/datasets/${dataId}`,
                    state: { di_name: encodeURIComponent(dataInstanceName), timeCreatedAgo },
                  }}
                >
                  <b>{uniqueName}</b>
                </Link>
                <p>
                  Created by
                  {' '}
                  <a href={`/${instance.userName}`}>
                    <b>
                      {instance.userName}
                    </b>
                  </a>
                  <br />
                  {instance.timeCreatedAgo}
                  {' '}
                  ago
                </p>
              </div>
              <div className="project-desc-experiment" style={{ visibility: progressVisibility }}>
                <p><b>Usage: ---</b></p>
              </div>
              <div className="project-desc-experiment" style={{ visibility: modelDiv }}>
                <p>
                  Id:
                  {' '}
                  {instance.id}
                </p>
              </div>
              { getButtonsDiv(instance.currentState.toUpperCase(), instance.id) }
            </div>
          </div>
        );
      })}
    </div>
  );
};

class DataInstanceOverview extends Component {
  constructor(props) {
    super(props);
    this.state = {
      project: {},
      all: [],
      isDeleteModalVisible: false,
      dataInstances: [],
      typeOfMessage: '',
      onPositiveAction: (x) => x,
    };

    this.fetchPipelines = this.fetchPipelines.bind(this);
    this.setIsDeleteModalVisible = this.setIsDeleteModalVisible.bind(this);
    this.deletePipeline = this.deletePipeline.bind(this);
  }

  componentDidMount() {
    const { getBranches, projects: { selectedProject: { gid } } } = this.props;
    getBranches(gid);
    this.fetchPipelines();
  }

  // this is a way not the optimal to pass a callback function to modal
  setIsDeleteModalVisible(isDeleteModalVisible, typeOfMessage = '', payload = {}) {
    const { entity, name } = payload;
    const onPositiveAction = entity === 'pipeline'
      ? this.deletePipeline(name)
      : (x) => x;

    this.setState({
      isDeleteModalVisible,
      typeOfMessage,
      onPositiveAction,
    });
  }

  fetchPipelines() {
    let project;
    let filteredbranches = [];
    let gid;

    const brApi = new BranchesApi();
    const { projects, projects: { selectedProject: { id } } } = this.props;
    const dataPipelineApi = new DataPipelineApi();

    if (projects) {
      project = projects.selectedProject;
      gid = project.gid;
    }

    dataPipelineApi.getProjectPipelines(id)
      .then((backendPipelines) => {
        const dataPipelines = backendPipelines.filter((pipe) => pipe.pipeline_type === 'DATA');
        brApi.getBranches(gid).then((branches) => {
          filteredbranches = branches.filter((branch) => branch.name.startsWith('data-pipeline'));
          pipelinesApi.getPipesByProjectId(gid)
            .then((res) => {
              const dataInstancesClassified = classifyPipeLines(res, filteredbranches, dataPipelines);
              this.setState({
                project,
                dataInstances: dataInstancesClassified,
                all: dataInstancesClassified,
              });
            });
        });
      })
      .catch(() => toastr.error('Error', 'Error getting the pipelines'));
  }

  deletePipeline(name) {
    // lookup the pipeline in every group's values
    const { project: { gid } } = this.state;
    const { deleteBranch, getBranches } = this.props;

    deleteBranch(gid, name)
      .then(() => getBranches(gid))
      .then(this.fetchPipelines)
      .catch((err) => {
        const message = (err && err.statusText) || err;
        toastr.error('Error', `Unable to delete: ${message}`);
      });
  }

  handleButtonsClick(e) {
    if (e) {
      e.target.parentNode.childNodes.forEach((childNode) => {
        if (childNode.id !== e.target.id) {
          childNode.classList.remove('active');
        }
      });
      e.target.classList.add('active');

      const { all } = this.state;
      let filteredInstances = all;
      if (e.target.id === 'InProgress') {
        filteredInstances = all.filter((exp) => exp.status === 'running');
      } else if (e.target.id === 'Active') {
        filteredInstances = all.filter((exp) => exp.status === 'success');
      } else if (e.target.id === 'expired') {
        filteredInstances = all.filter((exp) => exp.status === 'failed');
      }
      this.setState({ dataInstances: filteredInstances });
    }
  }

  render() {
    const {
      project,
      dataInstances,
      isDeleteModalVisible,
      typeOfMessage,
      onPositiveAction,
    } = this.state;
    const {
      history, projects: { selectedProject }, fireModal, setPreconfiguredOPerations,
    } = this.props;
    let groupName;
    let name;
    if (selectedProject) {
      groupName = selectedProject.namespace.name;
      name = selectedProject.name;
    }
    return (
      <>
        <DataInstancesDeleteModal
          isModalVisible={isDeleteModalVisible}
          setIsVisible={this.setIsDeleteModalVisible}
          typeOfMessage={typeOfMessage}
          onPositiveAction={onPositiveAction}
        />
        <div>
          <Navbar />
          { project.gid && (
            <ProjectContainer
              activeFeature="data"
              folders={[groupName, name, 'Data', 'Instances']}
            />
          )}
          <Instruction
            id="DataInstanceOverview"
            titleText="Handling datasets:"
            paragraph={
              `A dataset is the result of an executed data pipeline. You can use this dataset directly as your source of data for an experiment
               (or another data pipeline). You can also merge the dataset to your master branch in your repository.`
            }
          />
          <div className="main-content">
            <div id="buttons-container" className="left">
              <button
                id="all"
                type="button"
                className="active btn btn-switch btn-bg-light btn-label-sm my-auto mr-2"
                onClick={(e) => this.handleButtonsClick(e)}
              >
                All
              </button>
              <button
                id="InProgress"
                type="button"
                className="btn btn-switch btn-bg-light btn-label-sm my-auto mr-2"
                onClick={(e) => this.handleButtonsClick(e)}
              >
                In Progress
              </button>
              <button
                id="Active"
                type="button"
                className="btn btn-switch btn-bg-light btn-label-sm my-auto mr-2"
                onClick={(e) => this.handleButtonsClick(e)}
              >
                Active
              </button>
              <button
                id="expired"
                type="button"
                className="btn btn-switch btn-bg-light btn-bg-lightbtn-label-sm my-auto mr-2"
                onClick={(e) => this.handleButtonsClick(e)}
              >
                Expired
              </button>
            </div>
            {dataInstances
              .map((dataInstanceClassification) => {
                const instances = dataInstanceClassification.values.map((val) => {
                  const timediff = getTimeCreatedAgo(val.commit.created_at, new Date());
                  const bpipeline = parseToCamelCase(val.backendPipeline);
                  return {
                    id: val.id,
                    currentState: val.status,
                    descTitle: val.name,
                    userName: val.commit.author_name,
                    timeCreatedAgo: timediff,
                    projId: selectedProject.gid,
                    dataOperations: bpipeline.dataOperations,
                    pipelineBackendId: bpipeline.id,
                    inputFiles: bpipeline.inputFiles,
                  };
                });
                const firstValue = dataInstanceClassification.values[0];
                const InstanceName = firstValue && firstValue.name;

                if (instances.length === 0) {
                  return null;
                }
                return (
                  <InstanceCard
                    key={InstanceName}
                    name={InstanceName}
                    history={history}
                    setIsDeleteModalVisible={this.setIsDeleteModalVisible}
                    deletePipeline={this.deletePipeline}
                    setPreconfiguredOPerations={setPreconfiguredOPerations}
                    fireModal={fireModal}
                    params={{
                      currentState: dataInstanceClassification.status,
                      instances,
                    }}
                  />
                );
              })}
          </div>
          <br />
          <br />
        </div>
      </>
    );
  }
}

DataInstanceOverview.propTypes = {
  projects: shape({
    selectedProject: objectOf(shape).isRequired,
  }).isRequired,
  getBranches: func.isRequired,
};

function mapStateToProps(state) {
  return {
    projects: state.projects,
    branches: state.branches,
  };
}

function mapActionsToProps(dispatch) {
  return {
    deleteBranch: bindActionCreators(deleteBranch, dispatch),
    getBranches: bindActionCreators(getBranchesList, dispatch),
    fireModal: bindActionCreators(fireModal, dispatch),
    setPreconfiguredOPerations: bindActionCreators(setPreconfiguredOPerations, dispatch),
  };
}

export default connect(mapStateToProps, mapActionsToProps)(DataInstanceOverview);
