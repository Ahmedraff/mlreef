// I am keeping this version because some layout's parts will be implemented
// once the API has the whole functionality.

import React, { useState, useEffect } from 'react';
// import PropTypes from 'prop-types';
// import { connect } from 'react-redux';
// import { bindActionCreators } from 'redux';
import MSimpleTabs from 'components/ui/MSimpleTabs';
import './SettingsViewMembers.scss';
import MInput from 'components/ui/MInput';
import MSimpleSelect from 'components/ui/MSimpleSelect';
import MDropdown from 'components/ui/MDropdown';
import UserApi from 'apis/UserApi';

const SettingsViewMembers = (props) => {
  const [queryUser, setQueryUser] = useState('');
  const [userSearchResults, setUserSearchResults] = useState([]);

  const handleSetQueryUser = (e) => {
    setQueryUser(e.target.value);
  };

  useEffect(
    () => {
      UserApi.getUsers(queryUser)
        // .then((e) => console.log(e) || e)
        .then(setUserSearchResults);
    },
    [queryUser],
  );

  return (
    <div className="settings-view-members">
      <MSimpleTabs
        key="members"
        border
        sections={[
          {
            label: 'Invite member',
            content: (
              <div id="settigs-members-users">
                <div className="settings-view-search">
                  <MInput
                    id="settings-view-search-input search-users"
                    className="mt-2"
                    value={queryUser}
                    label="MLReef member or email address"
                    placeholder="Search for members to update or invite"
                    onChange={handleSetQueryUser}
                  />
                  <div className="settings-view-search-results">
                    <ul className="search-list">
                      {userSearchResults.map((result) => (
                        // eslint-disable-next-line
                        <li
                          key={`user-${result.username}`}
                          className="search-list-item"
                          onClick={() => setQueryUser(result.username)}
                        >
                          <div className="user-avatar">
                            <img src={result.avatar_url} alt={result.name} />
                          </div>
                          <div className="user-info">
                            <div className="user-info-name">
                              {result.name}
                            </div>
                            <div className="user-info-username">
                              {`@${result.username}`}
                            </div>
                          </div>
                        </li>
                      ))}
                    </ul>
                  </div>
                </div>

                <MSimpleSelect
                  onChange={() => {}}
                  footer="Read more about role permissions"
                  label="Choose a role permission"
                  options={[]}
                  value=""
                />

                <MInput
                  id="exp-date-users"
                  className="mt-3"
                  value=""
                  type="date"
                  label="Access expiration date"
                  placeholder="Expiration date"
                  onChange={() => {}}
                  onBlur={() => {}}
                />
                <button type="button" className="btn btn-outline-primary">
                  Invite
                </button>
              </div>
            ),
          },
          {
            label: 'Invite group',
            content: (
              <div id="settigs-members-groups">
                <MInput
                  id="search-groups"
                  className="mt-2"
                  value=""
                  label="Search a group to invite"
                  placeholder="Search for a group"
                  onChange={() => {}}
                />

                <MSimpleSelect
                  onChange={() => {}}
                  footer="Read more about role permissions"
                  label="Max access level"
                  options={[]}
                  value=""
                />

                <MInput
                  id="exp-groups"
                  className="mt-3"
                  value=""
                  type="date"
                  label="Access expiration date"
                  placeholder="Expiration date"
                  onChange={() => {}}
                  onBlur={() => {}}
                />
                <button type="button" className="btn btn-outline-primary">
                  Invite
                </button>
              </div>
            ),
          },
        ]}
      />
      <div className="panel mt-4">
        <div className="panel-header">
          Existing members and groups
        </div>
        <div className="panel-content">
          <div className="panel-content-item">
            <div className="avatar"></div>
            <div className="info">
              <div className="info-title">
                <b>user_name </b>
                @user_name
              </div>
              <div className="info-subtitle">
                Given access two monts ago
              </div>
            </div>
            <div className="actions">
              <MDropdown
                className="mr-2"
                label="Role"
                items={[]}
              />
              {true && (
                <MDropdown
                  className="mr-2"
                  label="Expiration"
                  items={[]}
                />
              )}
              <button
                type="button"
                label="close"
                className="btn btn-danger btn-icon fa fa-times"
              />
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default SettingsViewMembers;
