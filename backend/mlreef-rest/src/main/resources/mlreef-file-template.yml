#@formatter:off
#################################################################################
# This is the MLReef configuration file.                                        #
# It contains the current configuration of  your data pipeline, model training, #
# or visualisation as well as the specific configurations.                      #
# Please refer to the documentation for information on how to edit this file    #
#################################################################################

# This is the docker image your model training will be executed in
image: registry.gitlab.com/mlreef/mlreef/experiment:%EPF_IMAGE_TAG%

variables:
  # Variables containing the prefix CI_ are provided directly by the the pipeline environment
  # https://docs.gitlab.com/ee/ci/variables/predefined_variables.html

  #GIT_PUSH_TOKEN is a CI-environment variable which needs to be available in the Gitlab project
  EPF_GITLAB_HOST: "%EPF_GITLAB_HOST%"      # Gitlab host name without port
  GIT_PUSH_NAME: "%CONF_NAME%"            # The name used for git pushing pipeline results
  GIT_PUSH_EMAIL: "%CONF_EMAIL%"           # The email used for git pushing pipeline results
  GITLAB_GROUP: "%GITLAB_GROUP%"         # Gitlab namespace the project is located in
  GITLAB_PROJECT: "%GITLAB_PROJECT%"       # Gitlab project to git push pipeline results to
  TARGET_BRANCH: "%TARGET_BRANCH%"        # Git branch pipeline results are pushed to
  # mlreef.com/api/v1/epf/experiments/:experiment_id
  EPF_PIPELINE_URL: "%EPF_PIPELINE_URL%"
  EPF_PIPELINE_SECRET: "%EPF_PIPELINE_SECRET%"

  # Docker-in-docker running options
  DOCKER_HOST: "tcp://docker:2375"
  DOCKER_TLS_CERTDIR: ""
  DOCKER_DAEMON_OPTIONS: "--insecure-registry=${CI_REGISTRY}"

%INPUT_MOUNT_POINTS%

%OUTPUT_MOUNT_POINTS%

  FINAL_OUTPUT_PATH: "%FINAL_OUTPUT_PATH%"
  IS_ALGORITHM: "%IS_ALGORITHM%"

  # Change pip's cache directory to be inside the project directory since we can only cache local items.
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

services:
  - name: docker:19.03.12-dind
    entrypoint: [ "sh", "-c", "dockerd-entrypoint.sh $DOCKER_DAEMON_OPTIONS" ]

# The before_script handles everything git related and sets up the automatic committing
before_script:
  - cat .mlreef.yml         # Debug output mlreef.yml
  - echo "################# Logging job parameters"
  - echo "CI_SERVER_URL   = $CI_SERVER_URL"
  - echo "CI_SERVER_HOST  = $CI_SERVER_HOST"
  - echo "CI_SERVER_PORT  = $CI_SERVER_PORT"
  - echo "CI_RUNNER_ID    = $CI_RUNNER_ID"
  - echo "CI_PROJECT_NAME = $CI_PROJECT_NAME"
  - echo "CI_PROJECT_PATH = $CI_PROJECT_PATH"
  - echo "#################"
  #- it just aint working!
  # https://stackoverflow.com/questions/42074414/gitlab-push-to-a-repository-using-access-token
  # git remote add origin https://oauth2:<my-token>@gitlab.com/my-user/my-repo.git
  - git remote set-url origin "http://oauth2:$GIT_PUSH_TOKEN@$EPF_GITLAB_HOST/$CI_PROJECT_PATH.git"
  - git config --global user.email "$GIT_PUSH_EMAIL"
  - git config --global user.name "$GIT_PUSH_NAME"
  - echo "Target branch is $TARGET_BRANCH"
  - echo "The final output path is $$LAST_OUTPUT_PATH"
  #only run background-push if it is an experiment
  - background-push "$FINAL_OUTPUT_PATH" $IS_ALGORITHM &

after_script:
  - epf-finish

mlreef-pipeline:
  artifacts:
    paths:
%ARTIFACTS_PATHS%
  # Workaround for failing pipelines mlreef#799 https://docs.gitlab.com/ee/ci/yaml/
  retry:
    max: 2
    when:
      # Retry when the failure reason is unknown.
      - unknown_failure
      # Retry when the script failed.
      - script_failure
      # Retry on API failure.
      - api_failure
      # Retry if there was a runner system failure (for example, job setup failed).
      - runner_system_failure
      # Retry if the runner was unsupported.
      - runner_unsupported
      # Retry if the scheduler failed to assign the job to a runner.
      - scheduler_failure
  script: |
    git checkout -B $TARGET_BRANCH
    echo $CI_JOB_ID >> data_pipeline.info
    %PIPELINE_STRING%
    git add .
    git status
    git commit -m "Add pipeline results [skip ci]"
    git push --set-upstream origin "$TARGET_BRANCH"
    git push
#@formatter:on