build frontend:
  extends: [".except-docu-branches"]
  # This docker version should correspond with the on docker version in the EC2 deployment
  stage: build
  image: docker:19.03.5                                     # https://hub.docker.com/_/docker/
  services:
    - docker:dind
  script:
    - cd web
    # Use Gitlab's internal unique job ID as build version. This way versions can be traced back to a specific build.
    - echo "REACT_APP_VERSION=$CI_JOB_ID"                   >> .env
    - echo "REACT_APP_BUILD_NUMBER=$CI_JOB_ID"              >> .env
    - echo "REACT_APP_BRANCH_NAME=$CI_COMMIT_REF_SLUG"      >> .env
    - cat .env

    - echo "${CI_REGISTRY_PASSWORD}" | docker login ${CI_REGISTRY} --username=${CI_REGISTRY_USER} --password-stdin
    - export TAG="${CI_COMMIT_REF_SLUG}"
    - if [ $CI_COMMIT_REF_SLUG == "master" ]; then TAG="latest";  fi          # follow docker naming conventions
    - docker build --tag "$CI_REGISTRY_IMAGE:$TAG" -f Dockerfile .
    - docker push "$CI_REGISTRY_IMAGE:$TAG"

    # Get Test coverage report from build image
    - docker create -ti --name dummy "$CI_REGISTRY_IMAGE:$TAG" bash
    - docker cp dummy:/app/coverage coverage
    - docker rm -f dummy
  artifacts:
    expire_in: 3 days
    paths:
      - web/coverage
