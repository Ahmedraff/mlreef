@startuml

interface Subject {
    An abstract entity describing "someone" who can own things
    ==
    id: UUID
    slug: String = ""
    name: String = ""
    email: String ....
}
class Person {
    A real person, which acts as an User
    ==
}
class Group {
    A team, organisation or group of users.
    Is a Subject and may own Projects and other things.
    ==
}
enum VisibilityScope {
    PRIVATE,
    PUBLIC,
    GROUP
}
Subject <|-- Person
Subject <|-- Group
Person - Group: via [Membership]

MLProject - Subject : < owns

interface Searchable {
    Future! Defines an Entity which can be found in the marketplace
    with certain fields or text search
    ==
    name: String
    description: String
    author: Subject
    visibilityScope: VisibilityScope
}

Searchable - Tag

interface MLProject {
    Describes a MLReef project linked to (gitlab) project.
    Certain properties (size, type) can describe this ML project.
    ==
    id: UUID
    slug: String
    url: String
}

class DataProject {
    Contains Data and lots of Experiments
    ==
    dataTypes: List<DataType>
}
class CodeProject {
    Hosts DataProcessors and ML runnable code.
    ==
}
Searchable <|-- MLProject
Searchable <|-- DataProcessor
Searchable <|-- ProcessorParameter
MLProject <|-- CodeProject
MLProject <|-- DataProject

enum ExperimentStatus {
    CREATED,
    STARTING,
    STARTED,
    RUNNING,
    SUCCEEDED,
    FAILED,
}

class Experiment {
    Describes an Instance of a pipeline with several preProcessing Operations,
    one processing Model, and optional several Visualizations.

    Holds saved Instances of its configuration and is therefore repeatable
    ==
    createdAt: Timestamp
    startedAt: Timestamp
    finishedAt: Timestamp
    status: ExperimentStatus
    output: OutputFiles..
    commitStart:String
    commitFinished:String
}
class PerformanceMetrics {
    Saves information how the Model performs.
    Will be visualised in MLReef Frontend.
    ==
    jsonBlob: String
    epochs: Int
}
Experiment *- PerformanceMetrics
DataProject o-- "many" Experiment : "has"

interface DataProcessor {
    They live in a CodeProject and exist in several versions,
    for example in git branches or git tags
    ==
    +id: UUID
    +version:String
    +slug: String = ""
    +inputDataType: DataType? = null
}
class Operation {
    They can be chained, have input and output data and
    will be executed in the preProcessing pipeline during the Experiment
    ==
    resultDataType: DataType? = null
}
class Visualization {
     Has input data for calculating/displaying insights on data.
     Chaining is not useful, data will be treated as readonly
     ==
     resultFiles: List<File> = listOf()
}

class Model {
    Exactly one Model is used in processing during Experiment.
    This is executed after the preProcessing pipeline of chainable Operations.
    A model or classifier is the result.
    ==
    resultFiles: List<File> = listOf()
}
DataProcessor  <|-- Operation
DataProcessor  <|-- Visualization
DataProcessor  <|-- Model
DataProcessor  *-- "many " ProcessorParameter : uses many parameters

CodeProject  -- DataProcessor : "lives in" <
DataProcessor  - DataProcessorInstance : "execution with config"
class DataProcessorInstance {
    An (instance of an) Experiment will have an Instance of DataProcessor.
    The actual configuration and parameters are coupled to this one-time instance.
    ==
    parent: DataProcessorInstance
}
class ParameterInstance {
    An Instance of an abstract ProcessorParameter with actual Value
    ==
    parameter:ProcessorParameter
    value: Object // depends on ParameterType
}
ProcessorParameter -- "many" ParameterInstance
Experiment *-- "several" DataProcessorInstance : preProcessing
Experiment *-- "several" DataProcessorInstance : postProcessing
Experiment *-- "one" DataProcessorInstance : algorithm
DataProcessorInstance *- "many" ParameterInstance

class ProcessorParameter {
    Describes the structure of a Parameter for a DataProcessor
    ==
    name: String = ""
    type: ParameterType? = null
    description: String = ""
    nullable: Boolean = true
    defaultValue: String = ""
}

enum ParameterType {
    BOOLEAN,
    STRING,
    INTEGER,
    COMPLEX,
    FLOAT,
    LIST,
    TUPLE,
    DICTIONARY,
    OBJECT
}

enum DataType {
    ANY,
    IMAGE,
    VIDEO,
    SENSOR,
    NUMBER,
    TABULAR,
    TEXT,
    BINARY,
    MODEL,
    NUMPY_ARRAY
}

@enduml
