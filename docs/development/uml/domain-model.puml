@startuml

interface Subject {
    id: UUID? = null
    slug: String = ""
    name: String = ""
    email: String ....
}
class Person
class Group
enum VisibilityScope {
    PRIVATE,
    PUBLIC,
    GROUP
}
Subject <|-- Person
Subject <|-- Group
Person - Group: via [Membership]

MLProject - Subject : < owns

interface Searchable {
    name: String
    description: String
    author: Subject
    visibilityScope: VisibilityScope
}

Searchable - Tag

interface MLProject {
    UUID: String
    slug: String
    url: String
}

class DataProject {
    dataTypes: List<DataType>
}
class CodeProject
Searchable <|-- MLProject
Searchable <|-- DataProcessor
Searchable <|-- ProcessorParameter
MLProject <|-- CodeProject
MLProject <|-- DataProject

enum ExperimentStatus {
    CREATED,
    STARTING,
    STARTED,
    RUNNING,
    SUCCEEDED,
    FAILED,
}

class Experiment {
    createdAt: Timestamp
    startedAt: Timestamp
    finishedAt: Timestamp
    status: ExperimentStatus
    output: OutputFiles..
}
class PerformanceMetrics {
    jsonBlob: String
    epochs: Int
}
Experiment *- PerformanceMetrics
DataProject o-- "many" Experiment : "has"

interface DataProcessor {
    val id: UUID? = null
    val slug: String = ""
    val inputDataType: DataType? = null
}
class Operation {
   resultDataType: DataType? = null
}
class Visualization {
   resultFiles: List<File> = listOf()
}
DataProcessor  <|-- Operation
DataProcessor  <|-- Visualization
DataProcessor  <|-- Model
DataProcessor  *-- "many " ProcessorParameter : uses many parameters

CodeProject  -- DataProcessor : "lives in" <
DataProcessor  - DataProcessorInstance : "execution with config"
class DataProcessorInstance {
    parent: DataProcessorInstance
}
class ParameterInstance {
    parameter:ProcessorParameter
    value: Object // depends on ParameterType
}
ProcessorParameter -- "many" ParameterInstance
Experiment *-- "several" DataProcessorInstance : preProcessing
Experiment *-- "several" DataProcessorInstance : postProcessing
Experiment *-- "one" DataProcessorInstance : algorithm
DataProcessorInstance *- "many" ParameterInstance

class ProcessorParameter {
    name: String = ""
    type: ParameterType? = null
    description: String = ""
    nullable: Boolean = true
    defaultValue: String = ""
}

enum ParameterType {
    BOOLEAN,
    STRING,
    INTEGER,
    COMPLEX,
    FLOAT,
    LIST,
    TUPLE,
    DICTIONARY,
    OBJECT
}

enum DataType {
    ANY,
    IMAGE,
    VIDEO,
    SENSOR,
    NUMBER,
    TABULAR,
    TEXT,
    BINARY,
    MODEL,
    NUMPY_ARRAY
}

@enduml
