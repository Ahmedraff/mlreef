#!/bin/bash
#when using sentinelhub
if pip list | grep -F sentinelhub; 
then echo "adding credentials"
     sentinelhub.config --instance_id '871fa19e-46c5-4d56-9882-b4119364fb24'
     sentinelhub.config --sh_client_id 'c5bfba36-4df7-4af7-b17d-a2faf46cedd9'
     sentinelhub.config --sh_client_secret 'hVpK:7&>!F4F:Y02<A^gN,uc>ZBjV:Y2Zhtt,VPK'
     sentinelhub.config --show
fi

#only continues if it is a model
if [ $2 != true ]
   then
        echo "Skip background-push"
        exit 0
fi
mkdir -p $1
echo "LOG: This is a version with Inotifywait." 
echo "LOG : ISALGORITM:  $2"
#extraction of output-path parameter and type of dataprocessor from PIPELINE_STRING mlreef-905
FILE="experiment.json"
STAT="$1/$FILE"
echo "STATISTIC_FILE is $STAT "
echo "EPF_PIPELINE_SECRET is $EPF_PIPELINE_SECRET"
echo "EPF_PIPELINE_URL is $EPF_PIPELINE_URL"

# send information to Backend's EPF API endpoint for "update" or "finish"
request_epf_endpoint_update() {
  url="$EPF_PIPELINE_URL/update"
  echo "Background push to URL: $url"
  curl --include --request PUT "$url" \
    --header "EPF-BOT-TOKEN: $EPF_PIPELINE_SECRET" \
    --header "Content-Type: application/json" \
    --data @"$STAT"
  echo ""
}
echo "LOG: Waiting for creation of experiments file."
#waits for creation of experiment.json file

while ! test -f "$STAT"; do
  echo "waiting for creation of $STAT"
  inotifywait -q --timeout 60 --event create $1 >/dev/null || {
    (( $? == 2 )) && sleep 10  ## inotify exit status 2 means timeout expired
    echo "inotifywait timeout. sleep 10 seconds"
  }
done

echo "LOG: Starting experiment tracking"
#pushes changes to database

while read path action file ; do 
    echo "MLReef-experiment statistic service:"
    cat $STAT
    request_epf_endpoint_update
    sleep 10 ;
done < <(inotifywait -m  -e close_write $STAT)

# to prevent this script from running forever we kill it in ci script
