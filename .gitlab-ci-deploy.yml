.deploy-base:
  extends: [".except-docu-branches"]
  stage: deploy
  image: registry.gitlab.com/systemkern/s5:latest
  variables:
    KEY: "Authorization:"                                  # workaround to preserver the yaml structure
    GITLAB_PORT: 10080
  before_script:
    - echo "CI_COMMIT_REF_SLUG  is $CI_COMMIT_REF_SLUG"
    - echo "FRONTEND_TAG        is $FRONTEND_TAG"
    - echo "BACKEND_TAG         is $BACKEND_TAG"
    - echo "FRONTEND_IMAGE_NAME is $FRONTEND_IMAGE_NAME"
    - echo "BACKEND_IMAGE_NAME  is $BACKEND_IMAGE_NAME"
    - echo "FRONTEND_IMAGE_PATH is $FRONTEND_IMAGE_PATH"
    - echo "BACKEND_IMAGE_PATH  is $BACKEND_IMAGE_PATH"
    - echo "DOCKER_ENV          is $DOCKER_ENV"
    - echo "DOCKER_COMPOSE      is $DOCKER_COMPOSE"

    - URL=$(cat $INSTANCE_INFO)
    - echo $URL                                            # debug output
    - chmod 400 $SSH_KEYFILE                               # prepare private key file
    - chmod +x src/bin/*
    # rewrite docker compose file
    # change the frontend docker image from develop branch to current branch
    - sed -i "s/$FRONTEND_IMAGE_NAME:develop/$FRONTEND_IMAGE_NAME:$FRONTEND_TAG/" $DOCKER_COMPOSE
    # change the frontend docker image from develop branch to current branch
    - sed -i "s/$BACKEND_IMAGE_NAME:develop/$BACKEND_IMAGE_NAME:$BACKEND_TAG/"    $DOCKER_COMPOSE
    # reactivate deactivated lines
    - sed -i "s~#CI_REMOVE~~"                                                     $DOCKER_COMPOSE
    # remove local docker-compose lines
    - sed -i "/gitlab-data:\/home\/git\/data:Z/d"                                 $DOCKER_COMPOSE
    - sed -i "/postgresql-data:\/var\/lib\/postgresql:Z/d"                        $DOCKER_COMPOSE
    - sed -i "/mlreefsql-data:\/var\/lib\/postgresql:Z/d"                         $DOCKER_COMPOSE
    - sed -i "s/GITLAB_HOST=gitlab/GITLAB_HOST=$URL/"                             $DOCKER_COMPOSE
    - sed -i "s/GITLAB_PORT=80/GITLAB_PORT=${GITLAB_PORT}/"                       $DOCKER_COMPOSE
    - ssh-keyscan -H "$URL" >>~/.ssh/known_hosts
    # rewrite .env file
    - echo GITLAB_SECRETS_DB_KEY_BASE=secret1111111111122222222222333333333334444444444555555555566666666661234 >>     $DOCKER_ENV
    - echo GITLAB_SECRETS_OTP_KEY_BASE=secret1111111111122222222222333333333334444444444555555555566666666661234 >>    $DOCKER_ENV
    - echo GITLAB_SECRETS_SECRET_KEY_BASE=secret1111111111122222222222333333333334444444444555555555566666666661234 >> $DOCKER_ENV
    # upload modified docker-compose to ec2 instance
    - scp -i $SSH_KEYFILE -o 'AddKeysToAgent yes' $DOCKER_COMPOSE ubuntu@${URL}:/home/ubuntu
    - scp -i $SSH_KEYFILE -o 'AddKeysToAgent yes' $DOCKER_ENV     ubuntu@${URL}:/home/ubuntu
    - ssh -i $SSH_KEYFILE -o 'AddKeysToAgent yes' ubuntu@"${URL}" "mkdir -p /home/ubuntu/bin"
    - ssh -i $SSH_KEYFILE -o 'AddKeysToAgent yes' ubuntu@"${URL}" "mkdir -p /home/ubuntu/src/bin"
    - scp -i $SSH_KEYFILE -o 'AddKeysToAgent yes' $DEPLOY_SCRIPT  ubuntu@${URL}:/home/ubuntu/$DEPLOY_SCRIPT
    - scp -i $SSH_KEYFILE -o 'AddKeysToAgent yes' $GITLAB_SETUP   ubuntu@${URL}:/home/ubuntu/$GITLAB_SETUP
    - ssh -i $SSH_KEYFILE -o 'AddKeysToAgent yes' ubuntu@"${URL}" "mkdir -p /home/ubuntu/src/resources"
    - scp -i $SSH_KEYFILE -o 'AddKeysToAgent yes' $NGINX_CONFIG ubuntu@${URL}:/home/ubuntu/$NGINX_CONFIG
    - echo "starting deploy script"
    - echo "----------------------------------------"
    - ssh -i $SSH_KEYFILE -o 'AddKeysToAgent yes' ubuntu@"${URL}" "
      sudo docker login ${DOCKER_REGISTRY} -u \"${DOCKER_USER}\" -p \"${DOCKER_PASSWORD}\"
      "


develop deploy:
  extends: .deploy-base
  only:
    refs: [develop, master]
  script: ssh -i $SSH_KEYFILE -o 'AddKeysToAgent yes' ubuntu@"${URL}" "
    export DOCKER_ENV="test.env"                                     &&
    echo GITLAB_ADMIN_TOKEN=$GITLAB_ADMIN_TOKEN >> $DOCKER_ENV       &&
    sudo docker-compose pull                                         &&
    sudo docker-compose up --detach                                  &&
    sudo docker system prune --force
    "

# TODO: at the beginning of time NO secrets have been used, therefore we might not even need the following lines
#echo GITLAB_SECRETS_SECRET_KEY_BASE=$GITLAB_SECRETS_SECRET_KEY_BASE >> local.env &&
#echo GITLAB_SECRETS_OTP_KEY_BASE=$GITLAB_SECRETS_OTP_KEY_BASE >> local.env &&
#echo GITLAB_SECRETS_DB_KEY_BASE=$GITLAB_SECRETS_DB_KEY_BASE >> local.env &&


feature branch deploy:
  extends: [".deploy-base", ".feature-branches-only"]
  script: ssh -i $SSH_KEYFILE -o 'AddKeysToAgent yes' ubuntu@"${URL}" "
    sudo $DEPLOY_SCRIPT
    --instance $URL
    --image $FRONTEND_IMAGE_PATH
    --port $GITLAB_PORT
    --key $AWS_ACCESS_KEY_ID
    --secret $AWS_SECRET_ACCESS_KEY
    --gitlab-admin-token $GITLAB_ADMIN_TOKEN
    --workaround 120
    "
