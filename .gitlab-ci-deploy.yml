deploy:
  extends: [".except-docu-branches"]
  stage: deploy
  when: delayed
  start_in: 3 minutes                                      # This delay exists to give new environments enough time to boot
  image: registry.gitlab.com/systemkern/s5:latest
  before_script:
    - URL=$(cat $INSTANCE_INFO)
    - echo "URL  is $URL" # debug output
    - if [ "$URL" = "" ]; then exit 1; fi
    - echo "CI_COMMIT_REF_SLUG       is $CI_COMMIT_REF_SLUG"
    - echo "FRONTEND_TAG             is $FRONTEND_TAG"
    - if [ "$FRONTEND_TAG" = "" ];   then exit 1; fi
    - echo "BACKEND_TAG              is $BACKEND_TAG"
    - if [ "$BACKEND_TAG" = "" ];    then exit 1; fi
    - echo "FRONTEND_IMAGE_NAME      is $FRONTEND_IMAGE_NAME"
    - if [ "$FRONTEND_IMAGE_NAME" = "" ]; then exit 1; fi
    - echo "BACKEND_IMAGE_NAME       is $BACKEND_IMAGE_NAME"
    - if [ "$BACKEND_IMAGE_NAME" = "" ]; then exit 1; fi
    - echo "FRONTEND_IMAGE_PATH      is $FRONTEND_IMAGE_PATH"
    - if [ "$FRONTEND_IMAGE_PATH" = "" ]; then exit 1; fi
    - echo "BACKEND_IMAGE_PATH       is $BACKEND_IMAGE_PATH"
    - if [ "$BACKEND_IMAGE_PATH" = "" ]; then exit 1; fi
    - echo "DOCKER_ENV               is $DOCKER_ENV"
    - if [ "$DOCKER_ENV" = "" ];     then exit 1; fi
    - echo "DOCKER_COMPOSE           is $DOCKER_COMPOSE"
    - if [ "$DOCKER_COMPOSE" = "" ]; then exit 1; fi

    - chmod 400 $SSH_KEYFILE                               # prepare private key file
    - chmod +x src/bin/*
    # rewrite docker compose file
    # change the frontend docker image from develop branch to current branch
    - sed -i "s/$FRONTEND_IMAGE_NAME:develop/$FRONTEND_IMAGE_NAME:$FRONTEND_TAG/" $DOCKER_COMPOSE
    # change the backend docker image from develop branch to current branch
    - sed -i "s/$BACKEND_IMAGE_NAME:develop/$BACKEND_IMAGE_NAME:$BACKEND_TAG/"    $DOCKER_COMPOSE
    # Activate (uncomment) specific lines in the docker-compose file
    - sed -i "s~#CI_ACTIVATE~~"                                                   $DOCKER_COMPOSE
    # remove tagged lines in the docker-compos file
    - sed -i "/#CI_DELETE_LINE/d"                                                 $DOCKER_COMPOSE
    - cat $DOCKER_COMPOSE
    - ssh-keyscan -H "$URL" >>~/.ssh/known_hosts
    # upload modified docker-compose to ec2 instance
    - ssh -i $SSH_KEYFILE -o 'AddKeysToAgent yes' ubuntu@"${URL}" "mkdir -p /home/ubuntu/bin"
    - ssh -i $SSH_KEYFILE -o 'AddKeysToAgent yes' ubuntu@"${URL}" "mkdir -p /home/ubuntu/src/bin"
    - ssh -i $SSH_KEYFILE -o 'AddKeysToAgent yes' ubuntu@"${URL}" "mkdir -p /home/ubuntu/src/resources"
    - scp -i $SSH_KEYFILE -o 'AddKeysToAgent yes' $DOCKER_COMPOSE ubuntu@${URL}:/home/ubuntu/$DOCKER_COMPOSE
    - scp -i $SSH_KEYFILE -o 'AddKeysToAgent yes' $DEPLOY_SCRIPT  ubuntu@${URL}:/home/ubuntu/$DEPLOY_SCRIPT
    - scp -i $SSH_KEYFILE -o 'AddKeysToAgent yes' $NGINX_CONFIG   ubuntu@${URL}:/home/ubuntu/$NGINX_CONFIG
    - echo "Wait for the machine to actually install docker"
    - echo "Starting deploy script"
    - echo "----------------------------------------"
    - ssh -i $SSH_KEYFILE -o 'AddKeysToAgent yes' ubuntu@"${URL}" "
        echo "${CI_REGISTRY_PASSWORD}" | sudo docker login ${CI_REGISTRY} --username=${CI_REGISTRY_USER} --password-stdin
      "
  script: ssh -i $SSH_KEYFILE -o 'AddKeysToAgent yes' ubuntu@"${URL}" "
    sudo docker images;
    sudo docker ps;
    sudo $DEPLOY_SCRIPT
    --instance $URL
    --key $AWS_ACCESS_KEY_ID
    --secret $AWS_SECRET_ACCESS_KEY
    --docker-environment-file $DOCKER_ENV
    --gitlab-admin-token $GITLAB_ADMIN_TOKEN
    --gitlab-secrets-key-base secret1111111111122222222222333333333334444444444555555555566666666661234
    --gitlab-opt-key-base secret1111111111122222222222333333333334444444444555555555566666666661234
    --gitlab-db-key-base secret1111111111122222222222333333333334444444444555555555566666666661234
    "
