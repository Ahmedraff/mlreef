variables:
  EC2_INSTANCE_NAME:    "mlreef-$CI_COMMIT_REF_SLUG"       # environment name and url are set separately

# provision boots up the new ec2 instance for deploying MLReef
provision:
  extends: [".except-docu-branches"]
  stage: provision
  except:
    refs:
      - master
  image: registry.gitlab.com/systemkern/s5:latest-aws
  script: bin/ci-provision
  artifacts:
    paths:
      - $INSTANCE_INFO                                     # pass instance url to later stages
  environment:
    name: $CI_COMMIT_REF_SLUG
    url: $CI_PIPELINE_URL
    on_stop: decommission                                  # clean up after branch merge


get production ip:
  stage: provision
  only:
    refs:
      - master
  image: registry.gitlab.com/systemkern/s5:latest-aws
  variables:
    TF_VAR_INSTANCE_NAME: "mlreef-production"              # Used by terraform and '.gitlab-ci-provision.yml'
  script: echo "ec2-3-126-88-77.eu-central-1.compute.amazonaws.com" > $INSTANCE_INFO               # pass instance url to deploy stage
  after_script:
    - cat $INSTANCE_INFO                                   # debug output
  artifacts:
    paths:
      - "$INSTANCE_INFO"                                   # pass the file which contains our instance URL
  environment:
    name: mlreef.com
    url: https://mlreef.com


gitlab env config:
  extends: [".except-docu-branches"]
  image: registry.gitlab.com/systemkern/s5:latest
  stage: deploy
  variables:
    KEY: "Authorization:"                                  # workaround to preserver the yaml structure
  before_script:
    - URL=$(cat $INSTANCE_INFO)
    - echo $URL                                            # debug output
  script:
    # Get the ID of the gitlab environment we want to edit
    - ID=$(curl --fail
      --header "$KEY Bearer $GITLAB_COM_API_TOKEN"
      https://gitlab.com/api/v4/projects/$CI_PROJECT_ID/environments?name=$CI_COMMIT_REF_SLUG
      | jq -c '.[] | select(.name | contains("'$CI_REF_SLUG'")) | .id'
      )
    - echo "ID is $ID"                                     # debug output
    # configure the gitlab environment with the correct URL
    - curl --request PUT --fail
      --header "$KEY Bearer $GITLAB_COM_API_TOKEN"
      --data "name=$CI_COMMIT_REF_SLUG&external_url=http://$URL/login"
      https://gitlab.com/api/v4/projects/$CI_PROJECT_ID/environments/$ID


# The decommission job is configured by the provision's job `on_stop` command.
# The execution of decommission is triggered by merging or deleting a branch.
# https://docs.gitlab.com/ee/ci/environments.html#automatically-stopping-an-environment
decommission:
  extends: [".feature-branches-only"]
  stage: maintenance
  except:
    refs:
      - master
      - develop
  when: manual
  image: registry.gitlab.com/systemkern/s5:latest-aws
  variables:
    GIT_STRATEGY: "none"                                    # because branches are deleted on merge, we must not access the git repo
  script:
    # decommission the current environment
    # use the aws-cli to retrieve the description (json) for our machine
    # parse the json with jq to get the instance id
    # the xargs command submits the termination command to AWS
    - aws ec2 describe-instances --filters "Name=tag:Name,Values=$EC2_INSTANCE_NAME"
      | jq -r ".Reservations[].Instances[].InstanceId"
      | xargs --no-run-if-empty aws ec2 terminate-instances --instance-id

    # remove the branch's frontend docker container
    # 1117031 is the id of the "gateway's" sub-repository id
    - curl --request DELETE --header "PRIVATE-TOKEN:$GITLAB_COM_API_TOKEN"
      https://gitlab.com/api/v4/projects/$CI_PROJECT_ID/registry/repositories/1117031/tags/$CI_COMMIT_REF_SLUG
    # 1151242 is the id of the "backend's" sub-repository id
    - curl --request DELETE --header "PRIVATE-TOKEN:$GITLAB_COM_API_TOKEN"
      https://gitlab.com/api/v4/projects/$CI_PROJECT_ID/registry/repositories/1151242/tags/$CI_COMMIT_REF_SLUG
    # 1196730 is the id of the "epf's" sub-repository id
    - curl --request DELETE --header "PRIVATE-TOKEN:$GITLAB_COM_API_TOKEN"
      https://gitlab.com/api/v4/projects/$CI_PROJECT_ID/registry/repositories/1196730/tags/$CI_COMMIT_REF_SLUG
  after_script:
    # remove the data backup from s3 (if it exists)
    - aws s3 rm "s3://$S3_DATA_BUCKET/mlreef-data-$CI_COMMIT_REF_SLUG.zip"
  environment:
    name: $CI_COMMIT_REF_SLUG
    action: stop
