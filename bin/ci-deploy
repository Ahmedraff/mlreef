#!/bin/bash
# shellcheck disable=SC2087    # Quote 'EOF' to make here document expansions happen on the server side rather than on the client. See SC2087.
# change to the repository root folder via the scripts location
cd "$(dirname "$0")"/..
. bin/includes/detect-os
. bin/includes/ci-environment
########################################
set -x  # output all commands
set -o  pipefail
set -e  # exit on immediately on every error
set -u  # error on usage of undefined variables
########################################


if [ "$URL" = "localhost" ]; then
  echo >&2 "ERROR: Cannot deploy to localhost, exiting."
  exit 18;
fi

# Ensure that GITLAB_COM_API_TOKEN is neither unset nor empty
if [ -z "${GITLAB_COM_API_TOKEN-}" ]; then
  echo >&2 "ERROR: Missing API token for gitlab.com 'GITLAB_COM_API_TOKEN'"
  exit 17;
fi


rewriteDockerImage() {
  # If a gateway image exists for the current branch, rewrite the docker compose file
  # change the docker image tag from "latest" to the current branch's $CI_COMMIT_REF_SLUG
  DOCKER_BRANCH_IMAGE_URL="https://gitlab.com/api/v4/projects/$CI_PROJECT_ID/registry/repositories/$1/tags/$CI_COMMIT_REF_SLUG/"
  echo "DOCKER_BRANCH_IMAGE_URL  is $DOCKER_BRANCH_IMAGE_URL"
  CURL_RESPONSE=$(curl --silent --header "Authorization:Bearer $GITLAB_COM_API_TOKEN" --output /dev/null -w ''%{http_code}'' "$DOCKER_BRANCH_IMAGE_URL")
  echo "$CURL_RESPONSE"
  if [ "$CURL_RESPONSE" = "200" ]; then
    echo "Found branch specific docker image for $2"
    sed -i "s/$2:master/$2:$CI_COMMIT_REF_SLUG/" docker-compose.yml;
  else
    echo "Could not find specific docker image for $2:$CI_COMMIT_REF_SLUG in docker registry"
  fi
}
# 1117031 is the id of the "gateway's" sub-repository id
rewriteDockerImage 1117031 "gateway"
# 1151242 is the id of the "backend's" sub-repository id
rewriteDockerImage 1151242 "backend"


# rewrite docker compose file:
# Activate (uncomment) specific lines in the docker-compose file
# remove tagged lines in the docker-compose file
sed "s~#CI_ACTIVATE~~" < docker-compose.yml \
  | sed "/#CI_DELETE_LINE/d" > docker-compose.local.yml
cat docker-compose.local.yml

### Prepare ssh connection
while ! ssh-keyscan -H "$URL" >>~/.ssh/known_hosts; do echo "Trying again..."; sleep 5; done

ssh -i   "$SSH_KEYFILE" -o 'AddKeysToAgent yes' ubuntu@"${URL}" "if [ -e ${SSH_KEYFILE} ]; then sudo rm $SSH_KEYFILE; fi"
scp -rpi "$SSH_KEYFILE" -o 'AddKeysToAgent yes' bin                       ubuntu@"${URL}":/home/ubuntu/
scp -rpi "$SSH_KEYFILE" -o 'AddKeysToAgent yes' docker-compose.local.yml  ubuntu@"${URL}":/home/ubuntu/
ssh -i "$SSH_KEYFILE" -o 'AddKeysToAgent yes' ubuntu@"${URL}" "
  echo ${CI_REGISTRY_PASSWORD} | sudo docker login ${CI_REGISTRY} --username=${CI_REGISTRY_USER} --password-stdin
"

if [ "$GITLAB_ADMIN_TOKEN" = "" ]; then exit 19; fi

### Execute the actual deployment ###
ssh -i "$SSH_KEYFILE" -o 'AddKeysToAgent yes' ubuntu@"${URL}" <<EOF
  sudo docker images;
  sudo docker ps;
  sudo bin/install                                              \
    --instance $URL                                             \
    --version $CI_COMMIT_REF_SLUG                               \
    --key $AWS_ACCESS_KEY_ID                                    \
    --secret $AWS_SECRET_ACCESS_KEY                             \
    --gitlab-admin-token $GITLAB_ADMIN_TOKEN                    \
    --noreply-email $NOREPLY_EMAIL                              \
    --noreply-email-password $NOREPLY_EMAIL_PASSWORD            \
    --gitlab-secrets-key-base secret1111111111122222222222333333333334444444444555555555566666666661234 \
    --gitlab-opt-key-base secret1111111111122222222222333333333334444444444555555555566666666661234     \
    --gitlab-db-key-base secret1111111111122222222222333333333334444444444555555555566666666661234
EOF
