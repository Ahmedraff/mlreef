#!/bin/sh
# shellcheck disable=SC2087    # Quote 'EOF' to make here document expansions happen on the server side rather than on the client. See SC2087.
# change to the repository root folder via the scripts location
cd "$(dirname "$0")"/..
. bin/includes/detect-os
. bin/includes/ci-environment
########################################
set -x    # output all commands
set -e    # exit on immediately on every error
set -u    # error on usage of undefined variables
########################################


echo "GITLAB_ADMIN_TOKEN       is $GITLAB_ADMIN_TOKEN"
if [ -z ${GITLAB_ADMIN_TOKEN+x} ]; then exit 17; fi
chmod +x src/main/bin/*

if [ "$URL" = "localhost" ]; then
  echo "cannot deploy to localhost, exiting"
  exit 18;
fi

rewriteDockerImage() {
  # If a gateway image exists for the current branch, rewrite the docker compose file
  # change the frontend docker image from "latest" to the current branch's $CI_COMMIT_REF_SLUG
  # As can be seen in .gitlab-ci-build.yml there is no image with tag "master", because it will be named "latest"
  DOCKER_BRANCH_IMAGE_URL=https://gitlab.com/api/v4/projects/$CI_PROJECT_ID/registry/repositories/$1/tags/$TAG/
  echo "DOCKER_BRANCH_IMAGE_URL  is $DOCKER_BRANCH_IMAGE_URL"
  CURL_RESPONSE=$(curl --silent --header "Authorization:Bearer $GITLAB_COM_API_TOKEN" --output /dev/null -w ''%{http_code}'' $DOCKER_BRANCH_IMAGE_URL)
  echo $CURL_RESPONSE
  if [ "$CURL_RESPONSE" = "200" ]; then
    echo "Found branch specific docker image for $2"
    sed -i "s/$2:develop/$2:$TAG/" docker-compose.yml;
  else
    echo "Could not find specific docker image for $2:$TAG in docker registry"
  fi
}
# 1117031 is the id of the "gateway's" sub-repository id
rewriteDockerImage 1117031 "gateway"
# 1151242 is the id of the "backend's" sub-repository id
rewriteDockerImage 1151242 "backend"


# rewrite docker compose file:
# Activate (uncomment) specific lines in the docker-compose file
sed -i "s~#CI_ACTIVATE~~"                                       docker-compose.yml
# remove tagged lines in the docker-compose file
sed -i "/#CI_DELETE_LINE/d"                                     docker-compose.yml
cat docker-compose.yml

### Prepare ssh connection
while ! ssh-keyscan -H "$URL" >>~/.ssh/known_hosts; do echo "Trying again..."; sleep 5; done

ssh -i $SSH_KEYFILE -o 'AddKeysToAgent yes' ubuntu@"${URL}" "if [ -e ${SSH_KEYFILE} ]; then sudo rm $SSH_KEYFILE; fi"
scp -rpi $SSH_KEYFILE -o 'AddKeysToAgent yes' bin                 ubuntu@${URL}:/home/ubuntu/
scp -rpi $SSH_KEYFILE -o 'AddKeysToAgent yes' docker-compose.yml  ubuntu@${URL}:/home/ubuntu/

echo "Wait for the machine to actually install docker"
echo "Starting deploy script"
echo "----------------------------------------"
ssh -i $SSH_KEYFILE -o 'AddKeysToAgent yes' ubuntu@"${URL}" "
  echo ${CI_REGISTRY_PASSWORD} | sudo docker login ${CI_REGISTRY} --username=${CI_REGISTRY_USER} --password-stdin
"

if [ "$GITLAB_ADMIN_TOKEN" = "" ]; then exit 19; fi

### Execute the actual deployment ###
ssh -i $SSH_KEYFILE -o 'AddKeysToAgent yes' ubuntu@"${URL}" <<EOF
  sudo docker images;
  sudo docker ps;
  sudo bin/install                                              \
    --instance $URL                                             \
    --key $AWS_ACCESS_KEY_ID                                    \
    --secret $AWS_SECRET_ACCESS_KEY                             \
    --gitlab-admin-token $GITLAB_ADMIN_TOKEN                    \
    --gitlab-secrets-key-base secret1111111111122222222222333333333334444444444555555555566666666661234 \
    --gitlab-opt-key-base secret1111111111122222222222333333333334444444444555555555566666666661234     \
    --gitlab-db-key-base secret1111111111122222222222333333333334444444444555555555566666666661234
EOF
