#!/bin/bash
# shellcheck disable=SC2155  ### declare and assign variables in one command might hide return values

# The ci-environment script acts as the basis to all ci scripts.
# It ensures the existence of the necessary environment variables.
# Since Gitlab's environment variables are created by Gitlab, this script
#
# In order to support local execution, necessary Gitlab CI variables are mocked


GIT_BRANCH=$(git rev-parse --abbrev-ref HEAD) || echo "no-git-inside-docker-container"
#This sed replaces slash "/" in branch names with dash "-"
LOCAL_CI_COMMIT_REF_SLUG=$(echo "$GIT_BRANCH" | sed "s~/~-~")

# https://www.gnu.org/software/bash/manual/html_node/Shell-Parameter-Expansion.html}
# https://stackoverflow.com/a/13864829/638225
# "${VAR:-default}" evaluates to either $VAR or the default value "default"
export      CI_PROJECT_ID="${CI_PROJECT_ID:-12894267}" #gitlab.com/mlreef/mlreef
echo "      CI_PROJECT_ID= $CI_PROJECT_ID"
export    CI_PIPELINE_URL="${CI_PIPELINE_URL:-http://localhost}"
echo "    CI_PIPELINE_URL= $CI_PIPELINE_URL"
export     CI_PIPELINE_ID="${CI_PIPELINE_ID:--1}"
echo "     CI_PIPELINE_ID= $CI_PIPELINE_ID"
export CI_COMMIT_REF_SLUG="${CI_COMMIT_REF_SLUG:-$LOCAL_CI_COMMIT_REF_SLUG}"
echo " CI_COMMIT_REF_SLUG= $CI_COMMIT_REF_SLUG"
export        CI_REGISTRY="${CI_REGISTRY:-registry.gitlab.com}"
echo "        CI_REGISTRY= $CI_REGISTRY"
export  CI_REGISTRY_IMAGE="${CI_REGISTRY_IMAGE:-registry.gitlab.com/mlreef/mlreef}"
echo "  CI_REGISTRY_IMAGE= $CI_REGISTRY_IMAGE"

export GITLAB_ADMIN_TOKEN=${GITLAB_ADMIN_TOKEN:-$(randomString 30)}
echo " GITLAB_ADMIN_TOKEN= $GITLAB_ADMIN_TOKEN"

export  EC2_INSTANCE_NAME="mlreef-$CI_COMMIT_REF_SLUG"       # environment name and url are set separately
echo "  EC2_INSTANCE_NAME= $EC2_INSTANCE_NAME"


# This check exists to allow running on local developer instance where deployment is not needed.
if [ -z ${AWS_DEVELOP_2020_2+x} ] && [ -z ${AWS_PROD_2020_1+x} ] ; then
  echo "INFO: No known keyfile found. Deployment jobs will fail"
else
  # AWS key pairs can be viewed here: https://eu-central-1.console.aws.amazon.com/ec2/v2/home?region=eu-central-1#KeyPairs:
  if [ -e "$AWS_PROD_2020_1" ]; then
    export   SSH_KEYFILE="$AWS_PROD_2020_1"
    export   SSH_KEYPAIR_NAME="AWS_PROD_2020_1"
  elif [ -e "$AWS_DEVELOP_2020_2" ]; then
    export   SSH_KEYFILE="$AWS_DEVELOP_2020_2"
    export   SSH_KEYPAIR_NAME="AWS_DEVELOP_2020_2"
  else
    echo >&2 "ERROR: could not determine EC2 Keypair"
    exit 17
  fi
  echo "        SSH_KEYFILE= $SSH_KEYFILE"
  chmod 400   "$SSH_KEYFILE" # ensure correct permissions on the keyfile
fi


export TAG="${CI_COMMIT_REF_SLUG}"
if [ "$CI_COMMIT_REF_SLUG" = "master" ]; then TAG="latest";  fi  # follow docker naming conventions
echo "   docker image TAG= $TAG"


# The text file which saves the environment URL
export      INSTANCE_INFO=${INSTANCE_INFO:-out/instance.info}
echo "      INSTANCE_INFO= $INSTANCE_INFO"
echo ""
if [ -e "${INSTANCE_INFO}" ]; then
  ls -al "${INSTANCE_INFO}"
  export URL=$(cat "$INSTANCE_INFO")
  echo "INFO: Looking for instance information in file $INSTANCE_INFO"
else
  echo "INSTANCE_INFO= $INSTANCE_INFO"
  #ls -al
  echo "INFO: file $INSTANCE_INFO not found, looking for URL environment variable"
  if [ -z ${URL+x} ]; then
    echo "INFO: environment variable URL is not set"
    echo "INFO: defaulting to 'localhost' instance"
    export URL="localhost"
  fi
  echo "Target instance URL=$URL"
fi


if [ -z ${CI_REGISTRY_USER+x} ]; then
  echo "INFO: In order for docker push to work, you have to set the environment variable CI_REGISTRY_USER to your Gitlab user" >&2
fi

if [ -z ${CI_REGISTRY_PASSWORD+x} ]; then
  echo "INFO: In order for docker push to work, you have to set the environment variable CI_REGISTRY_PASSWORD to your Gitlab access token" >&2
fi

export TAG="${CI_COMMIT_REF_SLUG}"
if [ "$CI_COMMIT_REF_SLUG" = "master" ]; then export TAG="latest";  fi          # follow docker naming conventions

export GATEWAY_IMAGE_PATH=$CI_REGISTRY_IMAGE/gateway:$TAG
export BACKEND_IMAGE_PATH=$CI_REGISTRY_IMAGE/backend:$TAG
export     EPF_IMAGE_PATH=$CI_REGISTRY_IMAGE/epf:$TAG
