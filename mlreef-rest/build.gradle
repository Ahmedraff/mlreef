plugins {
    id 'org.springframework.boot' version '2.1.9.RELEASE'
    id 'io.spring.dependency-management' version '1.0.8.RELEASE'
    id 'org.jetbrains.kotlin.jvm'
    id 'kotlin-spring'
    id 'kotlin-jpa'
    id 'kotlin-allopen'
    id 'org.asciidoctor.convert' version "1.5.9.2"
}

group = 'com.mlreef'
version = '0.0.1-SNAPSHOT'


dependencies {
    implementation project(':mlreef-domain')
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    implementation 'org.jetbrains.kotlin:kotlin-reflect'
    implementation "org.projectlombok:lombok"
    implementation "com.fasterxml.jackson.module:jackson-module-kotlin:2.9.+"

    implementation "org.springframework.boot:spring-boot-devtools"

    // Rest and HATEOAS
    implementation 'org.springframework.boot:spring-boot-starter-hateoas'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    // Security
    implementation "org.springframework.boot:spring-boot-starter-security"
    implementation "org.springframework.session:spring-session-data-redis"

    // spring data, JPA and Repositories
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    runtimeOnly 'org.postgresql:postgresql'
    runtimeOnly 'redis.clients:jedis:2.9.3'
    runtimeOnly 'com.h2database:h2'

    def jupiter = "5.4.0"
    def mockkVersion = "1.9.3"
    testImplementation "org.junit.jupiter:junit-jupiter:$jupiter"
    // DO NOT USE:   testImplementation "org.junit.jupiter:junit-jupiter-api:$jupiter"
    // DO NOT USE:   testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$jupiter"
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'junit', module: 'junit' //by both name and group
    }
    testImplementation "org.springframework.security:spring-security-test"
    testImplementation "org.springframework.restdocs:spring-restdocs-mockmvc"
    testImplementation "io.mockk:mockk:${mockkVersion}"
    asciidoctor 'org.springframework.restdocs:spring-restdocs-asciidoctor'

    // testcontainers
    testImplementation "org.testcontainers:testcontainers:1.12.3"
    testImplementation "org.testcontainers:postgresql:1.12.4"

}


configurations {
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestRuntime.extendsFrom testRuntime
}


test {
    systemProperty 'junit.jupiter.extensions.autodetection.enabled', 'true'
    useJUnitPlatform()
}


compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

noArg {
    annotation("com.mlreef.rest.api.Dto")
    annotation("com.mlreef.rest.api.DtoRequest")
}

ext {
    snippetsDir = file('build/generated-snippets')
}

test {
    outputs.dir snippetsDir
}

asciidoctor {
    inputs.dir snippetsDir
    dependsOn test
}

bootJar {
    dependsOn asciidoctor
    from("${asciidoctor.outputDir}/html5") {
        into 'static/docs'
    }
}

task explodeJar(type: Copy) {
    dependsOn ":mlreef-rest:bootJar"
    mustRunAfter ":mlreef-rest:bootJar"
    from(zipTree(tasks.bootJar.outputs.files.singleFile))
    into("build/dependency")
}

task prepareDocker {
    dependsOn ":mlreef-rest:bootJar"
    dependsOn ":mlreef-rest:explodeJar"
    mustRunAfter ":mlreef-rest:explodeJar"
    doLast {
       print("Explode Jar for docker")
    }
}
