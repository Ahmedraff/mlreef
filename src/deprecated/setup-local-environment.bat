@echo off
SETLOCAL EnableDelayedExpansion

echo ### 1. STOP local docker context
docker-compose down
IF /I "%1"=="force" (
    echo.
    echo ### FORCE Mode
    echo ### CLEANING local docker context
    docker-compose rm -f -v -s
    docker volume rm frontend_sock
    docker volume rm frontend_gitlab-data
    docker volume rm frontend_gitlab-runner-config
    docker volume rm frontend_gitlab-runner-data
    docker volume rm frontend_mlreefsql-data
    docker volume rm frontend_postgresql-data
    echo.
    docker volume ls
    docker volume prune -f
    echo Tip: You CAN delete other unused volumes with: docker volume prune
    echo.
    echo.
    echo # Recreating local.env file
    IF  "%GITLAB_SECRETS_DB_KEY_BASE%"=="" (
       SET GITLAB_SECRETS_DB_KEY_BASE=secret11111111112222222222333333333344444444445555555555666666666612345
    )
    IF  "%GITLAB_SECRETS_SECRET_KEY_BASE%"=="" (
       SET GITLAB_SECRETS_SECRET_KEY_BASE=secret11111111112222222222333333333344444444445555555555666666666612345
    )
    IF  "%GITLAB_SECRETS_OTP_KEY_BASE%"=="" (
       SET GITLAB_SECRETS_OTP_KEY_BASE=secret11111111112222222222333333333344444444445555555555666666666612345
    )
    IF  "%GITLAB_ADMIN_TOKEN%"=="" (
       SET GITLAB_ADMIN_TOKEN=QVj_FkeHyuJURko2ggZT
    )
    echo.
    echo # WRITING to local.env
    echo # generated by setup-local-environment.bat > ../local.env
    echo GITLAB_SECRETS_SECRET_KEY_BASE=!GITLAB_SECRETS_SECRET_KEY_BASE! >> ../local.env
    echo GITLAB_SECRETS_OTP_KEY_BASE=!GITLAB_SECRETS_OTP_KEY_BASE! >> ../local.env
    echo GITLAB_SECRETS_DB_KEY_BASE=!GITLAB_SECRETS_DB_KEY_BASE! >> ../local.env
    echo GITLAB_ADMIN_TOKEN=!GITLAB_ADMIN_TOKEN! >> ../local.env
)

docker-compose pull

IF /I "%1"=="" (
    echo Attention: run this script with argument "force" for the first time to generate local.env
)

echo.
echo ### 2. Start Redis, Postgres and Gitlab
echo This needs of lot of time (approx. 3-5 minutes) and must not be disturbed by SQL
echo Start initial setup
docker-compose up --detach gitlab
echo " "
echo Waiting for Gitlab is up and running...
timeout 60
FOR /L %%G IN (1,1,7) DO (
timeout 10
echo ... wait for "http://localhost:10080/admin/runners"
curl -f -X GET  "http://localhost:10080/admin/runners"
)

echo.
echo ### 3. Gitlab runners registration
echo Getting runner-registration-token from Gitlab...

for /f %%i in ('docker exec -t gitlab bash -c "bin/rails runner -e production \"puts Gitlab::CurrentSettings.current_application_settings.runners_registration_token\""') do set token=%%i

echo token is saved in last-runner-registration-token.txt ...
echo REGISTER_RUNNER_TOKEN=%token% > last-runner-registration-token.txt

docker-compose up --detach gitlab-runner-dispatcher
docker exec gitlab-runner-dispatcher rm      /etc/gitlab-runner/config.toml

docker exec gitlab-runner-dispatcher gitlab-runner register ^
    --non-interactive ^
    --url="http://gitlab:80/" ^
    --docker-network-mode mlreef-docker-network ^
    --registration-token "%token%" ^
    --executor "docker" ^
    --docker-image alpine:latest ^
    --docker-volumes /var/run/docker.sock:/var/run/docker.sock ^
    --description "local developer runner" ^
    --tag-list "docker" ^
    --run-untagged="true" ^
    --env "ENVIRONMENT_TEST_VARIABLE=foo-bar" ^
    --locked="false" ^
    --access-level="not_protected"

echo ### 4. Start other services...
docker-compose up --detach
timeout 15
docker-compose stop backend
timeout 15
docker-compose up --detach

echo.
echo Test connection for admin:
curl -f -I -X GET --header "Content-Type: application/json" --header "Accept: application/json" --header "PRIVATE-TOKEN: %GITLAB_ADMIN_TOKEN%" "localhost:20080/api/v1"
curl -f -I -X GET --header "Content-Type: application/json" --header "Accept: application/json" --header "PRIVATE-TOKEN: %GITLAB_ADMIN_TOKEN%" "localhost:10080/api/v4/users/1"

ENDLOCAL
