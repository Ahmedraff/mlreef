#!/bin/bash

set -e
set -m

echo "MLReef Rocks"
java -version

# Start the API Gateway
# NGINX will self-daemonize and run in the background

# TODO FIXME: nginx: [emerg] "gzip" directive is duplicate in /etc/nginx/conf.d/default.conf:14
sed -i "/gzip on;/d" /etc/nginx/conf.d/default.conf
sed -i "s/gitlab:10080/localhost:10080/" /etc/nginx/conf.d/default.conf
sed -i "s/backend:8080/localhost:8080/" /etc/nginx/conf.d/default.conf
echo "########################"

/usr/sbin/nginx

# call the Gitlab wrapper
/assets/wrapper > /dev/null &

# Start the PostgreSQL mlreefdb server
pg_ctlcluster 11 main start

##Setup gitlab-runner
GITLAB_PORT=10080
# Wait for Gitlab to enable the database
touch /var/log/configuration.lock
touch /var/log/configuration.log
{
  echo "### $(date) Waiting for Gitlab Runners API. The runners API is running in a separate process from the normal API"
  until [ "$(curl --silent --output /dev/null -w ''%{http_code}'' localhost:${GITLAB_PORT}/runners)" = "302" ]; do
    printf '.'
    sleep 5;
  done
  echo "### $(date) Expecting code 302; received: $(curl --silent --output /dev/null -w ''%{http_code}'' localhost:${GITLAB_PORT}/runners)"

  echo "### Getting Gitlab runners registration token from Gitlab."
  TOKEN=$(gitlab-rails runner -e production "puts Gitlab::CurrentSettings.current_application_settings.runners_registration_token" | tr -d '\r')
  echo TOKEN="$TOKEN"


  echo "### Configuring gitlab runner for localhost:$GITLAB_PORT"

  gitlab-runner register --non-interactive \
    --url="http://localhost:${GITLAB_PORT}/" \
    --registration-token "$TOKEN" \
    --executor "docker" \
    --docker-image alpine:latest \
    --docker-volumes /var/run/docker.sock:/var/run/docker.sock \
    --description "Packaged Runner" \
    --run-untagged="true" \
    --locked="false" \
    --access-level="not_protected"

  gitlab-runner start

} >/var/log/configuration.log
rm -f /var/log/configuration.lock

# java -cp app:app/lib/* com.mlreef.rest.RestApplicationKt

#Bring the first process to foreground
fg %1

