image: alpine:latest

stages:
  - prepare
  - build
  - deploy
  - maintenance

# The deployment on aws depends on thre main environment variables
# AWS_ACCESS_KEY_ID       create at https://console.aws.amazon.com/iam/
# AWS_SECRET_ACCESS_KEY   create at https://console.aws.amazon.com/iam/
# AWS_DEFAULT_REGION      default:eu-central-1
variables:
  BUILD_PATH: "web/build"
  IMAGE_NAME: "frontend"                                   # docker image base name
  IMAGE_PATH: "$DOCKER_REGISTRY/$DOCKER_ORGANISATION/$IMAGE_NAME:$CI_COMMIT_REF_SLUG"
  DOCKER_REGISTRY_REPOSITORY_ID: "717423"                  # https://gitlab.com/api/v4/projects/12894267/registry/repositories/
  EC2_INSTANCE_NAME: mlreef-$CI_COMMIT_REF_SLUG            # environment name and url are set separately
  EC2_PROVISION_SCRIPT: "./bin/provision.sh"
  STARTUP_SCRIPT: "bin/startup.sh"
  DEPLOY_SCRIPT:  "bin/deploy.sh"
  BACKUP_SCRIPT:  "bin/backup.sh"
  RESTORE_SCRIPT: "bin/restore.sh"
  DOCKER_COMPOSE: docker-compose.yml                       # file for transmitting VM information between stages
  INSTANCE_INFO:  instance.info                            # file for transmitting VM information between stages
  S3_DATA_BUCKET: "mlreef-data"
  DATA_ARCHIVE:   "mlreef-data-develop.zip"


provision-ec2:
  stage: prepare
  image: registry.gitlab.com/systemkern/s5:latest-aws
  variables:
    EC2_MACHINE_SIZE:  "t3a.medium"                        # https://aws.amazon.com/ec2/instance-types/
    EC2_IMAGE_AMI:     "ami-050a22b7e0cf85dd0"             # ubuntu 16.04 LTS
    EC2_SECURITY_GRP:  "application_servers"
  before_script:
    - chmod 400 development_deployment.pem                 # prepare private key file
    - bin/decomission.sh $EC2_INSTANCE_NAME                # first shutdown all current instances
    - sed -i "s~master/bin~$CI_COMMIT_REF_NAME/bin~"       $STARTUP_SCRIPT
    - sed -i "s~AWS_ACCESS_KEY_ID=XXXXX~AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID~"                 $STARTUP_SCRIPT
    - sed -i "s~AWS_SECRET_ACCESS_KEY=XXXXX~AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY~"     $STARTUP_SCRIPT
    - cat $STARTUP_SCRIPT
  script:
    - INSTANCE=$($EC2_PROVISION_SCRIPT $EC2_INSTANCE_NAME $STARTUP_SCRIPT)
    - echo "$INSTANCE"
    - echo "$INSTANCE" | tr -d '\r' > $INSTANCE_INFO       # pass instance url to deploy stage
  after_script:
    - cat $INSTANCE_INFO
  #TODO    - if [ $INSTANCE == "null" ]; then exit 1;  fi         # error on invalid INSTANCE_INFO
  artifacts:
    paths:
      - "$INSTANCE_INFO"                                   # pass the file which contains our instance URL
  environment:
    name: $CI_COMMIT_REF_SLUG
    url: $CI_PIPELINE_URL                                  # temporary url will be corrected by the gitlab-env-conf job
    on_stop: decomission                                   # clean up after branch merge


prepare-npm:
  stage: prepare
  image: node:latest
  cache:
    key: mlreef-npm-cache
    paths:
      - /usr/local/lib/node_modules
      - web/node_modules
  before_script:
    - ls -al /usr/local/lib/node_modules
  script:
    - cd web
    - pwd && ls -al
    - npm install --global --silent react-scripts
    - npm install --global --silent create-react-app@latest
    - npm install --global --silent react-scripts@3.0.1
    - npm install --silent .
    - cp -r /usr/local/lib/node_modules ../node_modules_global
  after_script:
    - ls -al /usr/local/lib/node_modules
    - ls -al node_modules_global
  artifacts:
    paths:
      - web/node_modules
      - node_modules_global


build-frontend:
  image: docker:latest
  stage: build
  services:
    - docker:dind
  before_script:
    - docker login ${DOCKER_REGISTRY} -u "${DOCKER_USER}" -p "${DOCKER_PASSWORD}"
    - mv node_modules_global web/node_modules_global
    - rm -rf web/package-lock.json
    - rm -rf web/node_modules
  script:
    - cd web
    - echo "creating docker image ${IMAGE_NAME} for user ${DOCKER_USER}"
    - docker build --pull --tag "$IMAGE_PATH" -f Dockerfile .
    - docker push "${IMAGE_PATH}"


# This job adds the actual frontend URL to the Environments GUI in gitlab.com
gitlab-env-conf:
  image: registry.gitlab.com/systemkern/s5:latest
  stage: deploy
  variables:
    KEY: "Authorization:"                                  # workaround to preserver the yaml structure
    GITLAB_PORT: 10080
  before_script:
    - URL=$(cat $INSTANCE_INFO)
    - echo $URL                                            # debug output
    - chmod 400 development_deployment.pem                 # prepare private key file
    - chmod +x $DEPLOY_SCRIPT
    # rewrite deploy script to include the correct url
    - sed -i "s/frontend:master/frontend:$CI_COMMIT_REF_SLUG/" $DOCKER_COMPOSE
  script:
    - $DEPLOY_SCRIPT --instance $URL --file $IMAGE_PATH --port $GITLAB_PORT
    - echo "========= ========== ========== =========="
    # Get the ID of the gitlab environment we want to edit
    - ID=$(curl --fail
      --header "$KEY Bearer $GITLAB_API_TOKEN"
      https://gitlab.com/api/v4/projects/$CI_PROJECT_ID/environments?name=$CI_COMMIT_REF_SLUG
      | jq -c '.[] | select(.name | contains("'$CI_REF_SLUG'")) | .id'
      )
    - echo "ID is $ID"                                      # debug output
    # configure the gitlab environment with the correct URL
    - curl --request PUT --fail
      --header "$KEY Bearer $GITLAB_API_TOKEN"
      --data "name=$CI_COMMIT_REF_SLUG&external_url=http://$URL"
      https://gitlab.com/api/v4/projects/$CI_PROJECT_ID/environments/$ID


decomission:
  when: manual
  image: registry.gitlab.com/systemkern/s5:latest-aws
  stage: maintenance
  variables:
    GIT_STRATEGY: none
    # Workaround for Gitlab Bug https://gitlab.com/gitlab-org/gitlab-runner/issues/1809
    WORKAROUND: "PRIVATE-TOKEN:" # workaround to not break the yaml structure
  script:
    # use the aws-cli to retrieve the description (json) for our machine
    # parse the json with jq to get the instance id
    # the xargs command at the end submits the termination command to AWS
    - aws ec2 describe-instances
      --filters "Name=tag:Name,Values=$EC2_INSTANCE_NAME"
      | jq -r ".Reservations[].Instances[].InstanceId"
      | xargs --no-run-if-empty aws ec2 terminate-instances
      --instance-id
    - echo "Delete URL is https://gitlab.com/api/v4/projects/$CI_PROJECT_ID/registry/repositories/$DOCKER_REGISTRY_REPOSITORY_ID/tags/$CI_COMMIT_REF_SLUG"
    - curl --request DELETE --header "$WORKAROUND $GITLAB_API_TOKEN" --fail
      https://gitlab.com/api/v4/projects/$CI_PROJECT_ID/registry/repositories/$DOCKER_REGISTRY_REPOSITORY_ID/tags/$CI_COMMIT_REF_SLUG
    - aws s3 rm "s3://mlreef-data/mlreef-data-$CI_COMMIT_REF_SLUG.zip"
  environment:
    name: $CI_COMMIT_REF_SLUG
    action: stop
  except:
    refs:
      - develop
      - master

backup-data:
  image: registry.gitlab.com/systemkern/s5:latest-aws
  stage: maintenance
  when: manual
  before_script:
    - URL=$(cat $INSTANCE_INFO)
    - echo $URL                                            # debug output
    - chmod 400 development_deployment.pem                 # prepare private key file
    - chmod +x $BACKUP_SCRIPT
    - sed -i "s~AWS_ACCESS_KEY_ID=XXXXX~AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID~"                  $BACKUP_SCRIPT
    - sed -i "s~AWS_SECRET_ACCESS_KEY=XXXXX~AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY~"      $BACKUP_SCRIPT
  script:
    - $BACKUP_SCRIPT --instance $URL --bucket $S3_DATA_BUCKET --file mlreef-data-$CI_COMMIT_REF_SLUG.zip

restore-from-develop:
  image: registry.gitlab.com/systemkern/s5:latest-aws
  stage: maintenance
  when: manual
  before_script:
    - URL=$(cat $INSTANCE_INFO)
    - echo $URL                                            # debug output
    - chmod 400 development_deployment.pem                 # prepare private key file
    - chmod +x $BACKUP_SCRIPT
    - sed -i "s~AWS_ACCESS_KEY_ID=XXXXX~AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID~"                  $RESTORE_SCRIPT
    - sed -i "s~AWS_SECRET_ACCESS_KEY=XXXXX~AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY~"      $RESTORE_SCRIPT
  script:
    - $RESTORE_SCRIPT $URL

restore-from-branch-backup:
  extends: restore-from-develop
  script:
    - sed -i "s/INIT_ZIP=mlreef-data-develop.zip/INIT_ZIP=mlreef-data-$CI_COMMIT_REF_SLUG.zip/" $RESTORE_SCRIPT
    - $RESTORE_SCRIPT $URL

