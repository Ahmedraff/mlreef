stages:
  - build
  - test
  - deploy
  - premerge
  - teardown

services:
  - docker:19.03.0-dind


variables:
  DOCKER_HOST: "tcp://docker:2375"  # gitlab needs this to support docker testcontainers
  DOCKER_DRIVER: overlay2           # gitlab needs this to support docker testcontainers
  DOCKER_TLS_CERTDIR: ""            # "/certs" gitlab needs this to support docker testcontainers
  IMAGE_NAME: "backend"
  IMAGE_PATH: "$DOCKER_REGISTRY/$DOCKER_ORGANISATION/$IMAGE_NAME:$CI_COMMIT_REF_SLUG"
  DOCKER_REGISTRY_REPOSITORY_ID: "753711"                        # https://gitlab.com/api/v4/projects/13830884/registry/repositories/
  REDIS_HOST: "redis"
  REDIS_PORT: 6379
  POSTGRES_DB: $DB_NAME
  POSTGRES_USER: $DB_USER
  POSTGRES_PASSWORD: $DB_PASSWORD


build and test:
  stage: build
  image: java:8
  variables:
    REDIS_HOST: "redis"
    REDIS_PORT: 6379
  #    POSTGRES_DB: $DB_NAME
  #    POSTGRES_USER: $DB_USER
  #    POSTGRES_PASSWORD: $DB_PASSWORD
  before_script:
    - export GRADLE_USER_HOME=`pwd`/.gradle
    - chmod +x ./gradlew
    - echo "Use DB $DB_NAME with $DB_USER"
  cache:
    key: "$CI_COMMIT_REF_SLUG"
    paths:
      - .gradle/wrapper
      - .gradle/caches
  script:
    - ./gradlew build
    - mkdir mlreef-rest/build/test-results/test/mlreef-domain
    - cp mlreef-domain/build/test-results/test/TEST-*.xml mlreef-rest/build/test-results/test/mlreef-domain/
    - ./gradlew jacocoTestReport coverageReport
    - ./gradlew :mlreef-rest:bootJar
    - ./gradlew :mlreef-rest:prepareDocker
  artifacts:
    paths:
      - mlreef-rest/build/asciidoc/html5/rest-api.html
      - mlreef-rest/build/libs/*
      - mlreef-rest/build/dependency/*
      - mlreef-rest/build/reports/jacoco/test
      - mlreef-rest/build/reports/tests/
    reports:
      junit: mlreef-rest/build/test-results/test/**/TEST-*.xml


deploy:
  stage: deploy
  image: docker:19.03.1
  script:
    - docker login ${DOCKER_REGISTRY} -u "${DOCKER_USER}" -p "${DOCKER_PASSWORD}"
    - echo "IMAGE_PATH=${IMAGE_PATH}"
    - cd mlreef-rest
    - docker build --pull --tag "$IMAGE_PATH" -f Dockerfile .
    - docker push "${IMAGE_PATH}"


pages:
  stage: deploy
  cache:
    key: pages-public-cache
    paths:
      - public/
  script:
    - ls public/develop public/feature/* -l || echo "Still empty"
    - mkdir public/$CI_COMMIT_BRANCH -p || echo "Already existing"
    - rm public/$CI_COMMIT_BRANCH/* -R || echo "Still empty"
    - mkdir public/$CI_COMMIT_BRANCH/coverage -p
    - mv mlreef-rest/build/reports/jacoco/test/html/* public/$CI_COMMIT_BRANCH/coverage
    - mv mlreef-rest/build/asciidoc/html5/rest-api.html public/$CI_COMMIT_BRANCH/index.html
    - echo "Documentation URL is $CI_PAGES_URL/$CI_COMMIT_BRANCH"
  artifacts:
    paths:
      - public
  environment:
    name: $CI_COMMIT_REF_SLUG
    url: $CI_PAGES_URL/$CI_COMMIT_BRANCH
    on_stop: decommission


decommission:
  when: manual
  stage: teardown
  image: registry.gitlab.com/systemkern/s5:latest-aws    # based on python:3-slim
  variables:
    GIT_STRATEGY: none
    # Workaround for Gitlab Bug https://gitlab.com/gitlab-org/gitlab-runner/issues/1809
    WORKAROUND: "PRIVATE-TOKEN:" # workaround to not break the yaml structure
  cache:
    key: pages-public-cache
    paths:
      - public/
  script:
    - curl --request DELETE --header "$WORKAROUND $GITLAB_API_TOKEN"
      https://gitlab.com/api/v4/projects/$CI_PROJECT_ID/registry/repositories/$DOCKER_REGISTRY_REPOSITORY_ID/tags/$CI_COMMIT_REF_SLUG
    - rm public/$CI_COMMIT_BRANCH/* -R || echo "Still empty"
  artifacts:
    paths:
      - public
  environment:
    name: $CI_COMMIT_REF_SLUG
    action: stop
  except:
    refs:
      - master
